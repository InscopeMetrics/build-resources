<?xml version="1.0"?>
<!--
  ~ Copyright 2018 Inscope Metrics Inc.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
  <!--
      If you set the basedir property below, then all reported file
      names will be relative to the specified directory. See
      http://checkstyle.sourceforge.net/5.x/config.html#Checker

      <property name="basedir" value="${basedir}"/>
  -->
  <property name="fileExtensions" value="java, properties, xml"/>

  <!-- Load suppressions from file -->
  <module name="SuppressionFilter">
    <property name="file" value="${suppressions_file}"/>
  </module>
  <module name="SuppressionFilter">
    <property name="file" value="${extra_suppressions_file}"/>
  </module>

  <!-- Enable annotation based suppression -->
  <module name="SuppressWarningsFilter"/>

  <module name="SuppressWithPlainTextCommentFilter">
    <property name="offCommentFormat" value="CHECKSTYLE\.OFF\: ([\w\|]+)"/>
    <property name="onCommentFormat" value="CHECKSTYLE\.ON\: ([\w\|]+)"/>
    <property name="checkFormat" value="$1"/>
  </module>

  <!-- Checks that a package-info.java file exists for each package.   -->
  <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
  <module name="JavadocPackage"/>

  <!-- Checks whether files end with a new line.                        -->
  <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
  <module name="NewlineAtEndOfFile"/>

  <!-- Checks that property files contain the same keys.         -->
  <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
  <module name="Translation"/>

  <!-- Checks for Size Violations.                    -->
  <!-- See http://checkstyle.sf.net/config_sizes.html -->
  <module name="FileLength"/>

  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.sf.net/config_whitespace.html -->
  <module name="FileTabCharacter"/>

  <!-- CUSTOMIZATION: Check that static imports are not used for anything other than testing libraries. -->
  <module name="RegexpSingleline">
      <property name="format" value='^import static (?!org\.junit|org\.hamcrest|org\.mockito|com\.github\.tomakehurst\.wiremock)'/>
      <property name="message" value="Only use static member imports for testing libraries."/>
  </module>

  <!-- Miscellaneous other checks.                   -->
  <!-- See http://checkstyle.sf.net/config_misc.html -->
  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="minimum" value="0"/>
    <property name="maximum" value="0"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>

  <!-- Checks that @author tags contain full name and email address -->
  <!-- CUSTOMIZATION: Added per Inscope Metrics coding standards. -->
  <module name="RegexpSingleline">
    <property name="format" value="((//)|(\*)) @author [^ ]*$"/>
    <property name="message"
              value='All @author tags should contain first and last name with email. e.g. "@author First Last (flast at example dot com)"'/>
  </module>

  <!-- Checks that <code> tags are not used -->
  <module name="RegexpSingleline">
    <property name="format" value="(?:(?:\/\/)|(?:\*)).*&lt;code&gt;.*&lt;\/code&gt;"/>
    <property name="message" value='Use "&apos;{&apos;@code ...&apos;}&apos;" or "&apos;{&apos;@link ...&apos;}&apos;" instead of "&lt;code&gt;...&lt;/code&gt;"'/>
  </module>

  <!-- Checks that /* package private */ is not used -->
  <module name="RegexpSingleline">
    <property name="format" value="\/\*[\s]*package[\s]+private[\s]*\*\/"/>
    <property name="message" value='Omit the explicit package private scope comment.'/>
  </module>

  <!-- Forbidden imports -->
  <!-- CUSTOMIZATION: Added per Inscope Metrics coding standards. -->
  <module name="RegexpSingleline">
    <property name="format" value="^import com\.arpnetworking\.metrics\.(ch|com|org)\..*"/>
    <property name="message" value="Do not import shaded dependencies from ArpNetworking."/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value="^import junit\.framework\..*"/>
    <property name="message" value="Use JUnit v4 instead."/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value="^import com\.google\.common\.base\.Optional"/>
    <property name="message" value="Use java.util.Optional instead."/>
  </module>

  <!-- Always throw propagate result -->
  <!-- CUSTOMIZATION: Added per Inscope Metrics coding standards. -->
  <module name="RegexpSingleline">
    <property name="format" value="^[ ]*Throwables.propagate\(.*"/>
    <property name="message" value="Always throw the result of Throwables.propagate."/>
  </module>

  <!-- Checks that LogValueBuilder without reference is not used -->
  <!-- CUSTOMIZATION: Added per Inscope Metrics coding standards. -->
  <module name="RegexpSingleline">
    <property name="format" value=" LogValueMapFactory\.builder\(\)"/>
    <property name="message" value="Specify the instance being logged to the builder static factory."/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value=" LogValueMapFactory\.of\("/>
    <property name="message" value="Use builder static factory and specify the instance being logged."/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value='\.put\("[_]?id", Integer\.toHexString\(System.identityHashCode\(this\)\)\)'/>
    <property name="message" value="Do not specify the id field explicitly."/>
  </module>
  <module name="RegexpSingleline">
    <property name="format" value='\.put\("[_]?class", this\.getClass\(\)'/>
    <property name="message" value="Do not specify the class field explicitly."/>
  </module>

  <!-- Checks for Line Size Violations.               -->
  <!-- See http://checkstyle.sf.net/config_sizes.html -->
  <module name="LineLength">
    <!-- CUSTOMIZATION: Sun recommends a maximum of 80 characters per line. Google enforces either 80 or 100. This increases the limit to 140. -->
      <property name="max" value="140"/>
  </module>

  <module name="TreeWalker">
    <!-- Turn checkstyle ON and OFF for a specified code block -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE\.OFF\: ([\w\|]+)"/>
      <property name="onCommentFormat" value="CHECKSTYLE\.ON\: ([\w\|]+)"/>
      <property name="checkFormat" value="$1"/>
    </module>

    <!-- Checks for Javadoc comments.                     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html -->
    <module name="JavadocMethod">
      <!-- CUSTOMIZATION: Sun recommends javadoc on all methods. This reduces the requirement to protected or more visible methods -->
      <property name="accessModifiers" value="PROTECTED, PUBLIC"/>
    </module>
    <module name="MissingJavadocMethod">
      <!-- CUSTOMIZATION: Sun recommends javadoc on all methods. This reduces the requirement to protected or more visible methods except standard setters and getters -->
      <property name="scope" value="protected"/>
      <property name="allowMissingPropertyJavadoc" value="true"/>
    </module>
    <module name="JavadocType">
      <!-- CUSTOMIZATION: Sun recommends javadoc on all types. This reduces the requirement to protected or more visible types. -->
      <property name="scope" value="protected"/>
      <property name="authorFormat" value="\S"/>
    </module>
    <module name="MissingJavadocType">
      <!-- CUSTOMIZATION: Sun recommends javadoc on all types. This reduces the requirement to protected or more visible types. -->
      <property name="scope" value="protected"/>
    </module>
    <module name="JavadocVariable">
      <!-- CUSTOMIZATION: Sun recommends javadoc on all variables. This reduces the requirement to public or more visible varaibles. -->
      <property name="accessModifiers" value="public"/>
    </module>
    <module name="JavadocStyle">
      <!-- CUSTOMIZATION: Sun recommends javadoc on all package-info.java files. Good class level documentation can render this less useful. -->
      <property name="tokens"
                value="ANNOTATION_DEF, ANNOTATION_FIELD_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, METHOD_DEF, VARIABLE_DEF"/>
    </module>

    <!-- Checks for Naming Conventions.                  -->
    <!-- See http://checkstyle.sf.net/config_naming.html -->
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>

    <!-- Checks for imports                              -->
    <!-- See http://checkstyle.sf.net/config_imports.html -->
    <module name="AvoidStarImport"/>
    <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
    <module name="RedundantImport"/>
    <module name="UnusedImports">
      <property name="processJavadoc" value="false"/>
    </module>
    <!-- CUSTOMIZATION: Enforce import order. -->
    <module name="ImportOrder">
      <property name="severity" value="error"/>
      <property name="groups" value="*,/^javax?\./"/>
      <!-- This ensures that static imports go last. -->
      <property name="separated" value="true"/>
      <property name="option" value="bottom"/>
      <property name="sortStaticImportsAlphabetically" value="true"/>
      <property name="tokens" value="STATIC_IMPORT, IMPORT"/>
    </module>
    <!-- CUSTOMIZATION: Avoid static imports. -->
    <module name="AvoidStaticImport">
      <property name="severity" value="error"/>
    </module>

    <!-- Checks for Size Violations.                    -->
    <module name="MethodLength"/>
    <module name="ParameterNumber"/>
    <!-- CUSTOMIZATION: Accept only one outer type per file. -->
    <module name="OuterTypeNumber"/>
    <!-- CUSTOMIZATION: Limit anonymous class length. -->
    <module name="AnonInnerLength">
      <property name="max" value="25"/>
    </module>
    <!-- CUSTOMIZATION: Limit executable statements per method. -->
    <module name="ExecutableStatementCount">
      <property name="max" value="30"/>
    </module>
    <!-- CUSTOMIZATION: Limit method parameters. -->
    <module name="ParameterNumber">
      <property name="max" value="7"/>
    </module>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="EmptyForIteratorPad"/>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter">
      <!-- CUSTOMIZATION: Exclude ARRAY_INIT to allow for multi-line array declarations. -->
      <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
    </module>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround">
      <!-- CUSTOMIZATION: Exclude LCURLY and RCURLY to allow for empty anonymous class definitions. -->
      <property name="tokens"
                value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR"/>
      <property name="allowEmptyConstructors" value="true"/>
      <property name="allowEmptyMethods" value="true"/>
    </module>

    <!-- Modifier Checks                                    -->
    <!-- See http://checkstyle.sf.net/config_modifiers.html -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Checks for blocks. You know, those {}'s         -->
    <!-- See http://checkstyle.sf.net/config_blocks.html -->
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock"/>
    <module name="LeftCurly">
      <!-- CUSTOMIZATION: All tokens except LAMBDA -->
      <property name="tokens"
                value="INTERFACE_DEF, CLASS_DEF, ANNOTATION_DEF, ENUM_DEF, CTOR_DEF, METHOD_DEF, ENUM_CONSTANT_DEF, LITERAL_WHILE, LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_SYNCHRONIZED, LITERAL_SWITCH, LITERAL_DO, LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, STATIC_INIT, OBJBLOCK"/>
    </module>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>

    <!-- Checks for common coding problems               -->
    <!-- See http://checkstyle.sf.net/config_coding.html -->
    <!-- CUSTOMIZATION: Allow inline conditionals. -->
    <!-- <module name="AvoidInlineConditionals"/> -->
    <!-- CUSTOMIZATION: Enforce covariant equality. -->
    <module name="CovariantEquals"/>
    <!-- CUSTOMIZATION: Enforce default is last in switch. -->
    <module name="DefaultComesLast"/>
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <!-- CUSTOMIZATION: Require local variables to be declared final. -->
    <module name="FinalLocalVariable"/>
    <module name="HiddenField">
      <!-- CUSTOMIZATION: Allow field hiding in constructors. -->
      <property name="ignoreConstructorParameter" value="true"/>
      <!-- CUSTOMIZATION: Allow field hiding in setters. -->
      <property name="ignoreSetter" value="true"/>
      <!-- CUSTOMIZATION: Allow setter to return its class. -->
      <property name="setterCanReturnItsClass" value="true"/>
    </module>
    <module name="IllegalInstantiation">
      <!-- CUSTOMIZATION: Disallow explicit construction of wrapper primitives. -->
      <property name="classes"
                value="java.lang.Boolean,java.lang.Integer,java.lang.Long,java.lang.Double,java.lang.Float,java.lang.Byte,java.lang.Char"/>
    </module>
    <module name="InnerAssignment"/>
    <module name="MagicNumber"/>
    <module name="MissingSwitchDefault"/>
    <!-- CUSTOMIZATION: Prevent modification of for-loop control variables inside the for loop -->
    <module name="ModifiedControlVariable"/>
    <!-- CUSTOMIZATION: Disallow multiple statements per line. -->
    <module name="OneStatementPerLine"/>
    <!-- CUSTOMIZATION: Disallow use of clone. -->
    <module name="NoClone"/>
    <!-- CUSTOMIZATION: Disallow use of a finalizer method. -->
    <module name="NoFinalizerCheck"/>
    <!-- CUSTOMIZATION: Require package declaration. -->
    <module name="PackageDeclaration"/>
    <!-- CUSTOMIZATION: Disallow parameters to be reassigned (e.g. they should be final). -->
    <module name="ParameterAssignment"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <!-- CUSTOMIZATION: Disallow string literal comparison with == and !=. -->
    <module name="StringLiteralEquality"/>
    <!-- CUSTOMIZATION: Disallow unnecessary parenthesis. -->
    <module name="UnnecessaryParentheses"/>

    <!-- Checks for class design                         -->
    <!-- See http://checkstyle.sf.net/config_design.html -->
    <!-- CUSTOMIZATION: Allow classes to be designed for extension. -->
    <!--<module name="DesignForExtension"/>-->
    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>
    <!-- CUSTOMIZATION: Exception classes should be immutable. -->
    <module name="MutableException"/>
    <module name="InterfaceIsType"/>
    <module name="VisibilityModifier">
      <!-- CUSTOMIZATION: Allow protected methods which are non-final, mutable or not annotated. -->
      <property name="protectedAllowed" value="true"/>
    </module>
    <!-- CUSTOMIZATION: Check that declarations are in order -->
    <module name="DeclarationOrder"/>
    <!-- CUSTOMIZATION: Check that inner types are last -->
    <module name="InnerTypeLast"/>

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <module name="ArrayTypeStyle"/>
    <module name="FinalParameters"/>
    <!-- CUSTOMIZATION: Allow projects to reach zero errors even with todo comments. -->
    <!-- <module name="TodoComment"/> -->
    <module name="UpperEll"/>
    <!-- CUSTOMIZATION: Require the file and outer type names to match -->
    <module name="OuterTypeFilename"/>

    <!-- CUSTOMIZATION: Require both the @deprecated javadoc and @Deprecated annotation. -->
    <module name="MissingDeprecated"/>

    <!-- CUSTOMIZATION: Disallow comparisons of this with null -->
    <module name="DescendantToken">
      <property name="tokens" value="EQUAL,NOT_EQUAL"/>
      <property name="limitedTokens" value="LITERAL_THIS,LITERAL_NULL"/>
      <property name="maximumNumber" value="1"/>
      <property name="maximumDepth" value="1"/>
      <property name="sumTokenCounts" value="true"/>
    </module>

    <!-- CUSTOMIZATION: Disallow string literal equality checks (use .equals!) -->
    <module name="DescendantToken">
      <property name="tokens" value="EQUAL,NOT_EQUAL"/>
      <property name="limitedTokens" value="STRING_LITERAL"/>
      <property name="maximumNumber" value="0"/>
      <property name="maximumDepth" value="1"/>
    </module>

    <!-- CUSTOMIZATION: Uninitialized for loop (use while instead) -->
    <module name="DescendantToken">
      <property name="tokens" value="FOR_INIT"/>
      <property name="limitedTokens" value="EXPR"/>
      <property name="minimumNumber" value="1"/>
    </module>

    <!-- CUSTOMIZATION: Missing condition in for loop -->
    <module name="DescendantToken">
      <property name="tokens" value="FOR_CONDITION"/>
      <property name="limitedTokens" value="EXPR"/>
      <property name="minimumNumber" value="1"/>
    </module>
  </module>

</module>
